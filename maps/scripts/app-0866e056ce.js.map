{"version":3,"sources":["scripts/app.js"],"names":["angular","module","factory","$http","$localStorage","getProfiles","get","then","response","data","getActiveProfile","profile","setActiveProfile","val","this","getMaxCalories","caloriesMax","pantry","setData","getData","getPantryCalories","calories","forEach","product","fields","nf_calories","quantity","getPantrySodium","sodium","nf_sodium","getPantrySaturedFat","saturedFat","nf_saturated_fat","apiKey","appId","getProducts","searchText","getAdvancedProducts","limit","MainController","toastr","nutritionixService","profilesService","pantryService","init","vm","results","loadingProgress","d","profiles","activeProfile","table","columns","dtOptions","dom","pagingType","autoWidth","responsive","rowReorder","order","getMatches","advancedSearch","searchLimit","hits","maxCalories","saveProfile","pantryCalories","checkCaloriesLimit","pantrySaturedFat","pantrySodium","error","addProductToPantry","push","deleteProductFromPantry","index","splice","$inject","controller","runBlock","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","templateUrl","controllerAs","otherwise","config","constant","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache","put"],"mappings":"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","file":"scripts/app-0866e056ce.js","sourcesContent":["/**\n *  Declare libraries use in application\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject',\n      [\n        'ngAnimate',\n        'ngCookies',\n        'ngStorage',\n        'ngTouch',\n        'ngSanitize',\n        'ngMessages',\n        'ngAria',\n        'ngResource',\n        'ui.router',\n        'ngMaterial',\n        'toastr',\n        'datatables'\n      ]);\n\n})();\n\n\n/**\n * Profiles Service\n *\n * @param $http\n * @param $localStorage\n * @returns {ProfilesService}\n * @constructor\n */\nangular.module('nutritionProject')\n  .factory('profilesService', function($http, $localStorage) {\n\n      return {\n\n        /**\n         *  Make an http call to get profiles from json file\n         *\n         *  @return {Promise}\n         */\n        getProfiles: function () {\n          return $http.get(\"app/components/profilesService/data/profiles.json\").then(function (response) {\n\n            return response.data;\n          });\n        },\n\n        /**\n         *  Get Profile from localStorage\n         *\n         *  @return {{id: number, label: string, caloriesMax: number}} Profile\n         */\n        getActiveProfile: function () {\n          return $localStorage.profile;\n        },\n\n        /**\n         *  Set new Value for Profile\n         *\n         *  @param val The new Profile Value\n         *  @return {profilesService}\n         */\n        setActiveProfile: function (val) {\n          $localStorage.profile = val;\n          return this;\n        },\n\n        /**\n         *  Get Calories Max Value\n         *\n         *  @return {*}\n         */\n        getMaxCalories: function () {\n          if (!$localStorage.profile) {\n            return false;\n          }\n          return $localStorage.profile.caloriesMax;\n        }\n      };\n  });\n\n\n/**\n * Pantry Service\n *\n * @param $localStorage\n * @returns {PantryService}\n * @constructor\n */\nangular.module('nutritionProject')\n  .factory('pantryService', function($localStorage) {\n\n      // Initialize pantry for service\n      var pantry = $localStorage.pantry || [];\n\n      return {\n\n        /**\n         *  Set new Value for Pantry\n         *\n         *  @param val The new Pantry Value\n         *  @return {pantryService}\n         */\n        setData: function(val) {\n          pantry = val;\n          $localStorage.pantry = val;\n          return this;\n        },\n\n        /**\n         *  Get Pantry Value\n         *\n         *  @return {Collection} Pantry\n         */\n        getData: function() {\n          return $localStorage.pantry;\n        },\n\n        /**\n         *  Get Pantry Calories\n         *\n         *  @return {Number} Calories\n         */\n        getPantryCalories: function () {\n          var calories = 0;\n          pantry.forEach(function (product) {\n            calories += product.fields.nf_calories * product.quantity;\n          });\n          return calories;\n        },\n\n        /**\n         *  Get Pantry Sodium\n         *\n         *  @return {Number} Sodium\n         */\n        getPantrySodium: function () {\n          var sodium = 0;\n          pantry.forEach(function (product) {\n            sodium += product.fields.nf_sodium * product.quantity;\n          });\n          return sodium;\n        },\n\n        /**\n         *  Get Pantry Satured Fat\n         *\n         *  @return {Number} Calories\n         */\n        getPantrySaturedFat: function () {\n          var saturedFat = 0;\n          pantry.forEach(function (product) {\n            saturedFat += product.fields.nf_saturated_fat * product.quantity;\n          });\n          return saturedFat;\n        }\n\n      };\n  });\n\n\n/**\n * Nutritionix Service\n *\n * @param $http\n * @param apiKey\n * @param appId\n * @returns {NutritionixService}\n * @constructor\n */\nangular.module('nutritionProject')\n  .factory('nutritionixService', function($http, apiKey, appId) {\n\n      return {\n\n        /**\n         *  Make an http call to get products matching searchText\n         *\n         *  @param searchText SearchText Value\n         *  @return {Promise}\n         */\n        getProducts: function (searchText) {\n\n          return $http.get('https://api.nutritionix.com/v1_1/search/' + searchText + '?results=0%3A50&cal_min=0&cal_max=50000&fields=item_name%2Cbrand_name%2Cnf_saturated_fat%2Cnf_sodium%2Cnf_calories%2Citem_id%2Cbrand_id&appId=' + appId + '&appKey=' + apiKey).then(function (response) {\n\n            return response.data;\n          });\n        },\n\n        /**\n         *  Make an http call to get products matching searchText and Calories limit\n         *\n         *  @param searchText SearchText Value\n         *  @param limit Calories Limit Value\n         *  @return {Promise}\n         */\n        getAdvancedProducts: function (searchText, limit) {\n\n          return $http.get('https://api.nutritionix.com/v1_1/search/' + searchText + '?results=0%3A50&cal_min=0&cal_max=' + limit + '&fields=item_name%2Cbrand_name%2Cnf_saturated_fat%2Cnf_sodium%2Cnf_calories%2Citem_id%2Cbrand_id&appId=' + appId + '&appKey=' + apiKey).then(function (response) {\n\n            return response.data;\n          });\n        }\n      };\n  });\n\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController(toastr, nutritionixService, profilesService, pantryService) {\n\n    var vm = this;\n\n    init();\n\n    /**\n     *  Initialize controller\n     */\n    function init(){\n\n      vm.results = {};\n\n      // Initialize pantry with localStorage if exist or empty\n      vm.pantry = pantryService.getData() || [];\n\n      vm.loadingProgress = false;\n\n      // Load profiles from service\n      profilesService.getProfiles().then(function(d) {\n        vm.profiles = d.profiles;\n      });\n\n      // Initialize activeProfile with localStorage if exist or with 'None'\n      vm.activeProfile = profilesService.getActiveProfile() || 'None';\n\n      // Initialize datatable options\n      vm.table = {\n        columns: [\"Product Name\", \"Brand\", \"Calories\", \"Sodium\", \"Saturated Fat\", \"Actions\"],\n        dtOptions: {\n          dom: '<\"top\"f>rt<\"bottom\"<\"left\"<\"length\"l>><\"right\"<\"info\"i><\"pagination\"p>>>',\n          pagingType: 'simple',\n          autoWidth: false,\n          responsive: true,\n          rowReorder: true,\n\n          order: [[0, 'asc']]\n        }\n      };\n\n    }\n\n    // NUTRITIONIX METHOD \\\\\n\n    /**\n     * Get results of search from nutritionixService\n     */\n    vm.getMatches = function(){\n\n      // Active the loading circle element\n      vm.loadingProgress = true;\n\n      //Check if its an advanced search or normal search\n      if(vm.advancedSearch && vm.searchLimit){\n        nutritionixService.getAdvancedProducts(vm.searchText, vm.searchLimit).then(function(d) {\n          vm.results = d.hits;\n          vm.loadingProgress = false;\n        });\n      }\n      else\n      {\n        nutritionixService.getProducts(vm.searchText).then(function(d) {\n          vm.results = d.hits;\n          vm.loadingProgress = false;\n        });\n      }\n\n    };\n\n    // PROFILES METHODS \\\\\n\n    /**\n     * Return the limit of calories for active profile from profilesService\n     *\n     * @returns {Number} Max Calories\n     */\n    vm.maxCalories = function () {\n\n      return profilesService.getMaxCalories();\n\n    };\n\n    /**\n     * Save Profile in localStorage in profilesService\n     */\n    vm.saveProfile = function(){\n\n      profilesService.setActiveProfile(vm.activeProfile);\n\n    };\n\n    // PANTRY METHODS \\\\\n\n    /**\n     * Get the number of Calories in the Pantry from pantryService\n     *\n     * @returns {Number} Calories in the Pantry\n     */\n    vm.pantryCalories = function() {\n\n      var calories = pantryService.getPantryCalories();\n\n      // Check if the Calories limit is reached\n      vm.checkCaloriesLimit(calories);\n\n      return calories;\n\n    };\n\n    /**\n     * Get the number of Satured Fat in the Pantry from pantryService\n     *\n     * @returns {Number} Satured Fat in the Pantry\n     */\n    vm.pantrySaturedFat = function() {\n\n      return pantryService.getPantrySaturedFat();\n\n    };\n\n    /**\n     * Get the number of Sodium in the Pantry from pantryService\n     *\n     * @returns {Number} Sodium in the Pantry\n     */\n    vm.pantrySodium = function() {\n\n      return pantryService.getPantrySodium();\n\n    };\n\n    /**\n     * Check if the number Calories > limit defined by Profile\n     *\n     * @param calories\n     */\n    vm.checkCaloriesLimit = function (calories) {\n\n       if(calories > vm.maxCalories() && vm.maxCalories()){\n\n         // Call to toastr library to add a toast for this limit\n         toastr.error('You have exceeded the maximum recommended calories limit per day !');\n\n       }\n\n    };\n\n    /**\n     * Add a product to pantry\n     *\n     * @param product\n     */\n    vm.addProductToPantry = function (product) {\n\n      // Set product quantity to 1 by default\n      product.quantity = 1;\n\n      // Add product to pantry\n      vm.pantry.push(product);\n\n      // Save pantry in pantryService\n      pantryService.setData(vm.pantry);\n\n    };\n\n    /**\n     * Delete a product from pantry\n     *\n     * @param index\n     */\n    vm.deleteProductFromPantry = function (index) {\n\n      // Delete a product from pantry\n      vm.pantry.splice(index,1);\n\n      // Save pantry in pantryService\n      pantryService.setData(vm.pantry);\n\n    };\n\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock() {\n\n  }\n\n})();\n\n/**\n *  Route configuration file\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'vm'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/**\n * Constants :\n *    apiKey : Value of Api Key\n *    appId : Value of App Id\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject')\n    .constant('apiKey', 'a76fdac72565c061ac54edd796d9e986')\n    .constant('appId', '26f173c5');\n\n})();\n\n/**\n *  Configurations for application\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('nutritionProject')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options for toastr library\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n  }\n\n})();\n\nangular.module(\"nutritionProject\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div layout=column layout-fill><md-content><!-- Header Section --><section class=jumbotron><h1>Welcome to Nutrition App</h1><p class=lead><img src=assets/images/cutlery-logo.png alt=\\\"Logo Couverts\\\"><br></p></section><!--  / Header Section --><!-- Search input and profile Select --><div layout=row layout-align=\\\"space-around center\\\"><div layout=row layout-align=center><div layout=column><md-input-container><label>Recherche</label><input ng-model=vm.searchText></md-input-container><md-checkbox ng-model=vm.advancedSearch aria-label=\\\"Advanced Search\\\">Advanced Search</md-checkbox></div><md-input-container ng-show=vm.advancedSearch ng-style=\\\"{\\'margin-left\\': \\'10px\\', \\'margin-right\\': \\'10px\\' }\\\"><label>Maximum Calories (kcal)</label><input type=number ng-model=vm.searchLimit></md-input-container><md-button class=\\\"md-raised searchButton\\\" ng-click=vm.getMatches()>Rechercher</md-button></div><div><md-input-container ng-style=\\\"{width: \\'200px\\', \\'padding-bottom\\': \\'55px\\'}\\\"><label>Your Profile</label><md-select ng-change=vm.saveProfile() ng-model=vm.activeProfile ng-model-options=\\\"{trackBy: \\'$value.id\\'}\\\"><md-option><em>None</em></md-option><md-option ng-repeat=\\\"profile in vm.profiles\\\" ng-value=profile>{{profile.label}}</md-option></md-select></md-input-container></div></div><!-- / Search input and profile Select --><!-- Datatable of results and Pantry --><div class=layout-margin layout=row layout-align=\\\"space-between start\\\" ng-style=\\\"{\\'margin-top\\': \\'20px\\'}\\\"><!-- Datatable of results --><div flex=50><div layout=row ng-show=vm.loadingProgress layout-align=space-around><md-progress-circular md-mode=indeterminate></md-progress-circular></div><table class=\\\"dataTable row-border hover\\\" ng-hide=vm.loadingProgress datatable=ng dt-options=vm.table.dtOptions><thead><tr><th class=secondary-text><div class=table-header><span class=column-title>Product Name</span></div></th><th class=secondary-text><div class=table-header><span class=column-title>Brand</span></div></th><th class=secondary-text><div class=table-header><span class=column-title>Calories (kcal)</span></div></th><th class=secondary-text><div class=table-header><span class=column-title>Sodium (mg)</span></div></th><th class=secondary-text><div class=table-header><span class=column-title>Saturated Fat (g)</span></div></th><th class=secondary-text><div class=table-header><span class=column-title>Actions</span></div></th></tr></thead><tbody><tr ng-repeat=\\\"result in vm.results\\\"><td><span>{{result.fields.item_name}}</span></td><td><span>{{result.fields.brand_name}}</span></td><td><span>{{result.fields.nf_calories}}</span></td><td><span>{{result.fields.nf_sodium}}</span></td><td><span>{{result.fields.nf_saturated_fat}}</span></td><td><span><md-button class=\\\"md-fab md-mini addButton\\\" ng-click=vm.addProductToPantry(result) aria-label=\\\"Add to pantry\\\"><i class=material-icons ng-style=\\\"{color: \\'white\\', \\'font-size\\':\\'25px\\', \\'padding-top\\':\\'7px\\'}\\\">add</i><md-tooltip><span>Add to pantry</span></md-tooltip></md-button></span></td></tr></tbody></table></div><!-- / Datatable of results --><!-- Pantry --><div layout=column flex><md-toolbar><div layout=column layout-align=start class=md-toolbar-tools><span class=md-display-1>Pantry </span><span class=md-subhead ng-show=\\\"vm.maxCalories() && (vm.maxCalories()-vm.pantryCalories()>=0)\\\">( Calories remaining before reaching your limit : {{vm.maxCalories()-vm.pantryCalories() | number : 2}} kcal )</span></div><div class=md-toolbar-tools layout=row layout-align=\\\"space-between center\\\"><div layout=column><span ng-class=\\\"(vm.pantryCalories() > vm.maxCalories() && vm.maxCalories()) ? \\'warning\\' : \\'\\'\\\">Calories: {{vm.pantryCalories() | number : 2}} kcal</span></div><span ng-class=\\\"vm.pantrySodium() > 5000 ? \\'warning\\' : \\'\\'\\\">Sodium: {{vm.pantrySodium() | number : 2}} mg</span> <span>Satured Fat: {{vm.pantrySaturedFat() | number : 2}} g</span></div></md-toolbar><md-content class=\\\"pantry md-whiteframe-2dp\\\" flex><md-list layout-padding layout-align=\\\"center center\\\"><md-list-item class=md-3-line ng-repeat=\\\"product in vm.pantry track by $index\\\"><div layout=row layout-align=\\\"space-between center\\\" class=md-list-item-text><div layout=column flex=70><div layout=row layout-align=\\\"space-between center\\\"><span>{{product.fields.item_name}} From {{product.fields.brand_name}}</span></div><div layout=row layout-align=\\\"space-between center\\\"><div layout=column><span>Calories :</span> <span>{{product.fields.nf_calories * product.quantity | number : 2}} kcal</span></div><div layout=column><span>Sodium :</span> <span>{{product.fields.nf_sodium * product.quantity | number : 2}} mg</span></div><div layout=column><span>Satured Fat :</span> <span>{{product.fields.nf_saturated_fat * product.quantity | number : 2}} g</span></div></div></div><div layout=row layout-align=\\\"end center\\\" flex=30><div layout=column><span>Quantity :</span> <span><input type=number ng-model=product.quantity ng-style=\\\"{width: \\'60px\\'}\\\"></span></div><div layout=column><md-button class=\\\"md-fab md-mini deleteButton\\\" ng-click=vm.deleteProductFromPantry($index) aria-label=\\\"Delete from pantry\\\"><i class=material-icons ng-style=\\\"{color: \\'white\\', \\'font-size\\':\\'25px\\', \\'padding-top\\':\\'7px\\'}\\\">delete</i><md-tooltip><span>Delete from pantry</span></md-tooltip></md-button></div></div></div><md-divider></md-divider></md-list-item></md-list></md-content></div><!-- / Pantry --></div><!-- / Datatable of results and Pantry --></md-content></div>\");}]);"],"sourceRoot":"/source/"}